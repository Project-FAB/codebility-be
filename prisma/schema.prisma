// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String         @id @default(uuid()) @map("_id")
  name              String
  address           String
  email_address     String
  github_link       String
  portfolio_website String
  tech_stacks       String[]
  password          String
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @default(now()) @map("updated_at")
  schedule          String[]
  position          String[]
  orgChart          org_chart?
  timeLogs          time_logs[]
  userprojects      UserProjects[]
  userclients       UserClients[]
  todoList          todo_list[]
  note              Notes[]
  roleType          RoleTypeEnum
  userType          UserTypeEnum   @default(USER)

  @@unique([email_address])
}

model org_chart {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model time_logs {
  id                 String   @id @default(uuid()) @map("_id")
  userId             String   @unique
  user               Users    @relation(fields: [userId], references: [id])
  time_in            DateTime @default(now()) @map("time_in")
  time_out           DateTime @default(now()) @map("time_out")
  total_worked_hours Int
  total_late_hours   Int
  total_ot_time      Int
  scheduled_time_in  DateTime
  scheduled_time_out DateTime
}

model Projects {
  id          String         @id @default(uuid()) @map("_id")
  project     UserProjects[]
  clientId    String         @unique
  client      Clients        @relation(fields: [clientId], references: [id])
  todoList    todo_list[]
  note        Notes[]
  name        String
  github_link String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @map("updated_at")
}

model Clients {
  id             String        @id @default(uuid()) @map("_id")
  client         UserClients[]
  project        Projects[]
  company_name   String
  email          String
  contact_number String
  linkedin_link  String
  location       String
}

model todo_list {
  id          String   @id @default(uuid()) @map("_id")
  userId      String   @unique
  user        Users    @relation(fields: [userId], references: [id])
  projectId   String   @unique
  project     Projects @relation(fields: [userId], references: [id])
  title       String
  github_link String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
}

model Notes {
  id          String   @id @default(uuid()) @map("_id")
  userId      String   @unique
  user        Users    @relation(fields: [userId], references: [id])
  projectId   String   @unique
  project     Projects @relation(fields: [userId], references: [id])
  title       String
  github_link String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
}

model UserProjects {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  user      Users    @relation(fields: [userId], references: [id])
  projectId String   @unique
  project   Projects @relation(fields: [userId], references: [id])
}

model UserClients {
  id       String  @id @default(uuid()) @map("_id")
  userId   String  @unique
  user     Users   @relation(fields: [userId], references: [id])
  clientId String  @unique
  client   Clients @relation(fields: [clientId], references: [id])
}

enum RoleTypeEnum {
  MENTOR
  INTERN
}

enum UserTypeEnum {
  ADMIN
  USER
}
